Description
Before this stage, two players can play only one game. We are going to change this. In this stage, implement the option to play multiple games.

After setting the board dimensions, ask the players if they would like to play a single or multiple games. In the latter case, keep and print the score. When a player wins a game, they get 2 points. If it's a draw, give 1 point to each player.

If the players have chosen the multiple game option, alternate the first move for each new game. However, each player retains the same disc symbol (see Example 3).

Objectives
After setting the board dimensions, players see the following:

Do you want to play single or multiple games?
For a single game, input 1 or press Enter
Input a number of games:
Only positive digits are valid as for input (except 0). If a player inputs anything else, print Invalid input and ask for another try (see Example 4).

If players input 1 or press Enter, start a single game and print the following message:

<1st player's name> VS <2nd player's name>
<Rows> X <Columns>
Single game
In this case, the gameplay remains the same (see Examples 1, 2).

If players input an integer that is bigger than 1, start the multiple game mode and print the following message:

<1st player's name> VS <2nd player's name>
<Rows> X <Columns>
Total <Number of games> games
Print the score after each finished game in the following format:

Score
<1st player's name>: 2 <2nd player's name>: 2
Before the start of a game, print the game number: Game #<Number of game> (see Example 3). Players take turns for the first move, but each player keeps the same disc symbol throughout all games.

At any point of the game, if players input end, your program should output Game over! and terminate the game (see Example 5).


package connectfour

fun main() {
    println("Connect Four")
    println("First player's name:")
    val name1 = readln()
    println("Second player's name:")
    val name2 = readln()
    var n = 1
    var dim3: MutableList<String>
    var gameNum = 0
    do {
        println("Set the board dimensions (Rows x Columns)")
        println("Press Enter for default (6 x 7)")
        val size = readln().lowercase()
        var dim2 = ""

        for (i in size.indices) {
            if (size[i].toString() != " " && size[i] != '\t') {
                dim2 += size[i]
            }
        }
        dim3 = dim2.split('x').toMutableList()
        val regex = Regex("[0-9]?.x.[0-9]?")

        if (size == "") {
            gameNum = checkNumberGames()///////////////////////////////////////////////////////
            println("$name1 VS $name2")
            println("6 x 7 board")
            n = 0
            dim3.removeAt(0)
            dim3.add("6")
            dim3.add("7")
        }
        if (dim2.length > 1) {
            if (!dim2.matches(regex)) {
                println("Invalid input")
            } else {
                if (dim3[0].toInt() in 5..9 && dim3[1].toInt() in 5..9) {
                    gameNum = checkNumberGames()////////////////////////////////////////////////////
                    println("$name1 VS $name2")
                    println("${dim3[0]} x ${dim3[1]} board")
                    n = 0
                } else if (dim3[0].toInt() !in 5..9 && dim3[1].toInt() in 5..9) {
                    println("Board rows should be from 5 to 9")
                    n = 1
                } else if (dim3[0].toInt() in 5..9 && dim3[1].toInt() !in 5..9) {
                    println("Board columns should be from 5 to 9")
                    n = 1
                }
            }
        }
    } while ( n != 0 )

    val rows = dim3[0].toInt()
    val columns = dim3[1].toInt()
    var sqr = mutableListOf(mutableListOf<String>())

    var count3 = 0
    var count4 = 0
    if (gameNum == 1) {
        println("Single game")
        drawTable(rows, columns, sqr)/////////////////////////////////////////////////////////////////
        Loop@ do {
            var count = 0
            var count2 = 0
            var input: String
            val regex2 = Regex("[0-9][0-9]?[0-9]?")
            //--------------------------
            for (i in 0 until rows) {
                for (j in 0 until sqr[0].size) {
                    if (sqr[i][j] == "o") {
                        count++
                    }
                }
            }
            for (i in 0 until rows) {
                for (j in 0 until sqr[0].size) {
                    if (sqr[i][j] == "*") {
                        count2++
                    }
                }
            }
            //---------------------------
            if (count == count2) {
                println("${name1}'s turn:")
            } else {
                println("${name2}'s turn:")
            }

            input = readln()

            if (input == "end") {
                println("Game Over!")
            } else if (!input.matches(regex2)) {
                println("Incorrect column number")
            } else if (input.toInt() !in 1..columns) {
                println("The column number is out of range (1 - $columns)")
            } else {
                if (count == count2) {
                    val sqrColumns = input.toInt() * 2 - 1
                    for (i in rows - 1 downTo 0) {
                        if (sqr[i][sqrColumns] == " ") {
                            sqr[i][sqrColumns] = "o"
                            break
                        }
                        if (sqr[0][sqrColumns] != " ") {
                            println("Column $input is full")
                            continue@Loop
                        }
                    }
                } else if (count != count2) {
                    val sqrColumns = input.toInt() * 2 - 1
                    for (i in rows - 1 downTo 0) {
                        if (sqr[i][sqrColumns] == " ") {
                            sqr[i][sqrColumns] = "*"
                            break
                        }
                        if (sqr[0][sqrColumns] != " ") {
                            println("Column $input is full")
                            continue@Loop
                        }
                    }
                }
                drawEndTable(rows, columns, sqr)/////////////////////////////////////////////////////////////////
            }
            player1Won(rows, sqr, name1)/////////////////////////////////////////////////////////////////
            player2Won(rows, sqr, name2)/////////////////////////////////////////////////////////////////
            if (player1WonBoolean(rows, sqr)) { ////////////////////////////////////////////////////
                println("Game Over!")
                input = "end"
            } else if (player2WonBoolean(rows, sqr)) { /////////////////////////////////////////////////
                println("Game Over!")
                input = "end"
            }

            if (!sqr[0].contains(" ")) {
                println("It is a draw")
                println("Game Over!")
                input = "end"
            }
        } while (input != "end")
    } else if (gameNum > 1) {
        println("Total $gameNum games")
        Loop2@for (k in 1..gameNum) {
            println("Game #$k")
            drawTable(rows, columns, sqr)/////////////////////////////////////////////////////////////////
            Loop@ do {
                var count = 0
                var count2 = 0
                if (k % 2 == 0) count = 1
                var input: String
                val regex2 = Regex("[0-9][0-9]?[0-9]?")
                //--------------------------
                for (i in 0 until rows) {
                    for (j in 0 until sqr[0].size) {
                        if (sqr[i][j] == "o") {
                            count++
                        }
                    }
                }
                for (i in 0 until rows) {
                    for (j in 0 until sqr[0].size) {
                        if (sqr[i][j] == "*") {
                            count2++
                        }
                    }
                }
                //---------------------------
                if (count == count2) {
                    println("${name1}'s turn:")
                } else {
                    println("${name2}'s turn:")
                }

                input = readln()

                if (input == "end") {
                    break@Loop2
                } else if (!input.matches(regex2)) {
                    println("Incorrect column number")
                } else if (input.toInt() !in 1..columns) {
                    println("The column number is out of range (1 - $columns)")
                } else {
                    if (count == count2) {
                        val sqrColumns = input.toInt() * 2 - 1
                        for (i in rows - 1 downTo 0) {
                            if (sqr[i][sqrColumns] == " ") {
                                sqr[i][sqrColumns] = "o"
                                break
                            }
                            if (sqr[0][sqrColumns] != " ") {
                                println("Column $input is full")
                                continue@Loop
                            }
                        }
                    } else if (count != count2) {
                        val sqrColumns = input.toInt() * 2 - 1
                        for (i in rows - 1 downTo 0) {
                            if (sqr[i][sqrColumns] == " ") {
                                sqr[i][sqrColumns] = "*"
                                break
                            }
                            if (sqr[0][sqrColumns] != " ") {
                                println("Column $input is full")
                                continue@Loop
                            }
                        }
                    }
                    drawEndTable(rows, columns, sqr)/////////////////////////////////////////////////////////////////
                }
                player1Won(rows, sqr, name1)/////////////////////////////////////////////////////////////////
                player2Won(rows, sqr, name2)/////////////////////////////////////////////////////////////////
                if (player1WonBoolean(rows, sqr)) input = "end2" /////////////////////////////////////////////
                if (player2WonBoolean(rows, sqr)) input = "end2" /////////////////////////////////////////////
                if (!sqr[0].contains(" ")) {
                    println("It is a draw")
                    input = "end2"
                }
            } while (input != "end2")

            if (player1WonBoolean(rows, sqr)) {
                count3 += 2
            } else if (player2WonBoolean(rows, sqr)) {
                count4 += 2
            } else if (!sqr[0].contains(" ")) {
                count3++
                count4++
            }
            println("Score")
            println("$name1: $count3 $name2: $count4")
            sqr = mutableListOf(mutableListOf())
        }
        println("Game over!")
    }
}

//---------------------------------------------------------------------------------------------------------
fun checkNumberGames(): Int {
    var m = 0
    val regex = Regex("[1-9]?[0-9]?[0-9]?")
    var gameNum: String
    do {
        println("""
                Do you want to play single or multiple games?
                For a single game, input 1 or press Enter
                Input a number of games:
            """.trimIndent())
        gameNum = readln()
        if (!gameNum.matches(regex)) {
            println("Invalid input")
            m = 0
        } else if (gameNum == "1" || gameNum == "") {
            gameNum = "1"
            m = 1
        } else if (gameNum > "1") {
            m = 1
        }
    } while (m != 1)
    return gameNum.toInt()
}

fun player1Won(rows: Int, sqr: MutableList<MutableList<String>>, name1: String) {
    for (i in 0 until rows) {    //check the row "o"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "o") {
                if (sqr[i][j + 2] == "o") {
                    if (sqr[i][j + 4] == "o") {
                        if (sqr[i][j + 6] == "o") {
                            println("Player $name1 won")
                        }
                    }
                }
            }
        }
    }
    for (j in 1 until sqr[0].size step 2) {    //check the column "o"
        for (i in rows - 1 downTo 3) {
            if (sqr[i][j] == "o") {
                if (sqr[i - 1][j] == "o") {
                    if (sqr[i - 2][j] == "o") {
                        if (sqr[i - 3][j] == "o") {
                            println("Player $name1 won")
                        }
                    }
                }
            }
        }
    }
    for (i in rows - 1 downTo 3) {    //check the diagUp "o"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "o") {
                if (sqr[i - 1][j + 2] == "o") {
                    if (sqr[i - 2][j + 4] == "o") {
                        if (sqr[i - 3][j + 6] == "o") {
                            println("Player $name1 won")
                        }
                    }
                }
            }
        }
    }
    for (i in 0..rows - 4) {    //check the diagDown "o"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "o") {
                if (sqr[i + 1][j + 2] == "o") {
                    if (sqr[i + 2][j + 4] == "o") {
                        if (sqr[i + 3][j + 6] == "o") {
                            println("Player $name1 won")
                        }
                    }
                }
            }
        }
    }
}
fun player2Won(rows: Int, sqr: MutableList<MutableList<String>>, name2: String) {
    for (i in 0 until rows) {    //check the row "*"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "*") {
                if (sqr[i][j + 2] == "*") {
                    if (sqr[i][j + 4] == "*") {
                        if (sqr[i][j + 6] == "*") {
                            println("Player $name2 won")
                        }
                    }
                }
            }
        }
    }
    for (j in 1 until sqr[0].size step 2) {    //check the column "*"
        for (i in rows - 1 downTo 3) {
            if (sqr[i][j] == "*") {
                if (sqr[i - 1][j] == "*") {
                    if (sqr[i - 2][j] == "*") {
                        if (sqr[i - 3][j] == "*") {
                            println("Player $name2 won")
                        }
                    }
                }
            }
        }
    }
    for (i in rows - 1 downTo 3) {    //check the diagUp "*"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "*") {
                if (sqr[i - 1][j + 2] == "*") {
                    if (sqr[i - 2][j + 4] == "*") {
                        if (sqr[i - 3][j + 6] == "*") {
                            println("Player $name2 won")
                        }
                    }
                }
            }
        }
    }
    for (i in 0..rows - 4) {    //check the diagDown "*"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "*") {
                if (sqr[i + 1][j + 2] == "*") {
                    if (sqr[i + 2][j + 4] == "*") {
                        if (sqr[i + 3][j + 6] == "*") {
                            println("Player $name2 won")
                        }
                    }
                }
            }
        }
    }
}
//------------------------------------------------------------------------
fun player1WonBoolean(rows: Int, sqr: MutableList<MutableList<String>>): Boolean {
    var bool = false
    for (i in 0 until rows) {    //check the row "o"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "o") {
                if (sqr[i][j + 2] == "o") {
                    if (sqr[i][j + 4] == "o") {
                        if (sqr[i][j + 6] == "o") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    for (j in 1 until sqr[0].size step 2) {    //check the column "o"
        for (i in rows - 1 downTo 3) {
            if (sqr[i][j] == "o") {
                if (sqr[i - 1][j] == "o") {
                    if (sqr[i - 2][j] == "o") {
                        if (sqr[i - 3][j] == "o") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    for (i in rows - 1 downTo 3) {    //check the diagUp "o"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "o") {
                if (sqr[i - 1][j + 2] == "o") {
                    if (sqr[i - 2][j + 4] == "o") {
                        if (sqr[i - 3][j + 6] == "o") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    for (i in 0..rows - 4) {    //check the diagDown "o"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "o") {
                if (sqr[i + 1][j + 2] == "o") {
                    if (sqr[i + 2][j + 4] == "o") {
                        if (sqr[i + 3][j + 6] == "o") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    return bool
}
fun player2WonBoolean(rows: Int, sqr: MutableList<MutableList<String>>): Boolean {
    var bool = false
    for (i in 0 until rows) {    //check the row "*"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "*") {
                if (sqr[i][j + 2] == "*") {
                    if (sqr[i][j + 4] == "*") {
                        if (sqr[i][j + 6] == "*") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    for (j in 1 until sqr[0].size step 2) {    //check the column "*"
        for (i in rows - 1 downTo 3) {
            if (sqr[i][j] == "*") {
                if (sqr[i - 1][j] == "*") {
                    if (sqr[i - 2][j] == "*") {
                        if (sqr[i - 3][j] == "*") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    for (i in rows - 1 downTo 3) {    //check the diagUp "*"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "*") {
                if (sqr[i - 1][j + 2] == "*") {
                    if (sqr[i - 2][j + 4] == "*") {
                        if (sqr[i - 3][j + 6] == "*") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    for (i in 0..rows - 4) {    //check the diagDown "*"
        for (j in 1 until sqr[0].size - 7 step 2) {
            if (sqr[i][j] == "*") {
                if (sqr[i + 1][j + 2] == "*") {
                    if (sqr[i + 2][j + 4] == "*") {
                        if (sqr[i + 3][j + 6] == "*") {
                            bool = true
                        }
                    }
                }
            }
        }
    }
    return bool
}

fun drawTable(rows: Int, columns: Int, sqr: MutableList<MutableList<String>>) {
    for (i in 1..columns) {
        print(" $i")
    }
    println("")
    for (i in 1..rows) {
        val column = mutableListOf("║")
        for (j in 1..columns) {
            column.add(" ")
            column.add("║")
        }
        sqr.add(column)
    }
    sqr.removeAt(0)
    for (i in 0 until rows) {
        println(sqr[i].joinToString(""))
    }
    print('\u255A')
    print('\u2550')
    repeat(columns - 1) { print("${'\u2569'}" + "${'\u2550'}") }
    print('\u255D')
    println("")
}

fun drawEndTable(rows: Int, columns: Int, sqr: MutableList<MutableList<String>>) {
    for (i in 1..columns) {
        print(" $i")
    }
    println("")
    for (i in 0 until rows) {
        println(sqr[i].joinToString(""))
    }
    print('\u255A')
    print('\u2550')
    repeat(columns - 1) { print("${'\u2569'}" + "${'\u2550'}") }
    print('\u255D')
    println("")
}

